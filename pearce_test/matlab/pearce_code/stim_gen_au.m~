% stim_gen_au.m
% Version 1.10
% Written by Pearce Decker
% March 13 2014
%
% FORMAT: stim_gen_au(inputs)
%__________________________________________________________________________
%
% This program is intended to be used to generate stimuli for the auditory
% model. In future it should be implemented in a "seq_gen_au" type file
% that creates a paired associate trial sequence. The current version takes
% the name of the file to be created, the matrix of the stimulus, with rows
% representing frequencies and columns representing time_steps of size
% run_unit which is currently the third and final input.
%
% Initial design will aim to create stimulus files that look like those
% used most recently by Ted Chen. Here is an example of a single segment of
% an auditory stimulus file:
% 
% % set (MGNs, 81)          % 1~25 ms
% % {
% %    Node activation {ALL 0.0 }
% % 
% %    Node activation { ([1,42] 1.00) }
% %    Node activation { ([1,43] 1.00) }
% % }
% % 
% % 
% % set (GMGN, 81)          % 1~25 ms
% % {
% %    Node activation {ALL 0.0 }
% % 
% %    Node activation { ([1,17] 0.75) }
% %    Node activation { ([1,18] 0.75) }
% % }
% % 
% % Run 5
%
% Most recently a provisional randomization system for the GMGN i.e.
% non-specific input has been implemented. More detailed notes precede this
% section of the code...
% 
% Inputs: name - name of the file to which the stimulus text will be output
% stim_mat - the matrix of the stimulus in frequency x time. Rows represent
% frequencies from 1-100 and columns represent time. The time dimension is
% not bounded. Currently using make_up_tc.m (or down) is the standard method
% since standard input for the model has been tonal contours. However,
% anything that is in time-steps and 1-100 frequencies should work fine.
% Pure tones can be generated using make_tone.m.

%This version will accept stimuli of any length with any cell values as
%long as there are exactly 100 input frequencies. Therefore the
%stimulus should have exactly 100 rows.

%Currently, this version does not insert a switch to low attention just
%prior to the tone component of the tc. Not sure why that is done and
%will implement if necessary.

%These are simply for testing... eventually this function will either
%take the stim as an input or have user interaction to create it.
    
%    start_freq = 25;
%    tone_freq = 30;
%    end_freq = 25;
%    buffers = [2,2,2];
%    tone_len = 5;
%    freqs = [start_freq,tone_freq,end_freq];
%    stim_mat = make_up_tc(freqs,buffers,tone_len);
%    run_unit = 5;
%    name = 'test_au_stim1';
%__________________________________________________________________________

function stim_gen_au(name,stim_mats,run_unit)

    %%Starting/Input Variables%%
    %Might be best to make this pwd and simply require user to use this
    %from the /inputs directory
    base_path = '/home/deckerp/software/lsnm/pearce_test/auditory/inputs/';
    path = strcat(base_path,name);
    MGN_mat = stim_mats{1};
    GMGN_mat = stim_mats
    
    %If stim_path already exists this will overwrite it
    file = fopen(path,'wt');
    steps = size(stim_mat,2);
    for i = 1:steps
        %MGN Activation
        fprintf(file,'set (MGNs, 81)\n{\n\tNode activation {ALL 0.0 }\n');
        fprintf(file,'\tNode activation {');
        for j = 1:100
            if stim_mat(j,i) > 0
                fprintf(file,'([1,%2.0f] %1.2f)',j,stim_mat(j,i));
            end
        end
        fprintf(file,'}\n}\n');
        %GMGN Activation
        fprintf(file,'set (GMGN, 81)\n{\n\tNode activation {ALL 0.0 }\n');
        fprintf(file,'\tNode activation {');
        for j = 1:100
            if stim_mat(j,i) > 0
                fprintf(file,'([1,%2.0f] %1.2f)',j,stim_mat(j,i));
            end
        end
        fprintf(file,'}\n}\n');
        %Run Statement
        fprintf(file,'Run %2.0f\n',run_unit);
        %fprintf(file,'}\n\nRun %1.0f\n\n%-------------------------------------/n',run_unit);
    end
    
    fclose(file);
end